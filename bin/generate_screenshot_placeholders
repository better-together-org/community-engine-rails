#!/usr/bin/env ruby
# frozen_string_literal: true

require 'fileutils'
require 'pathname'

ROOT = Pathname.new(__dir__).join('..').expand_path
DOCS_GLOB = ROOT.join('docs').join('**', '*.md').to_s
ROOT_MD = [ROOT.join('README.md').to_s]
SPEC_DIR = ROOT.join('spec', 'docs_screenshots')
MAPPING_FILE = ROOT.join('docs', 'screenshot_mappings.yml')

FileUtils.mkdir_p(SPEC_DIR)

# Directories to exclude from automatic placeholder insertion
EXCLUDE_DIRS = [
  ROOT.join('docs', 'assessments').to_s,
  ROOT.join('docs', 'implementation').to_s,
  ROOT.join('docs', 'meta').to_s,
]

# Remove SCREENSHOT placeholders from excluded directories (cleanup)
EXCLUDE_DIRS.each do |d|
  Dir.glob(File.join(d, '**', '*.md')).each do |f|
    next unless File.file?(f)
    txt = File.read(f)
    new_txt = txt.dup
    while new_txt.match(/<!-- SCREENSHOT:/)
      new_txt = new_txt.gsub(/<!-- SCREENSHOT:[\s\S]*?-->\n\s*!?\[.*?\]\(.*?\)\n\n/m, '')
      new_txt = new_txt.gsub(/<!-- SCREENSHOT:[\s\S]*?-->\n/m, '')
    end
    if new_txt != txt
      File.write(f, new_txt)
      warn "Removed screenshot placeholders from excluded file: #{f}"
    end
  end
end

# Remove any existing generated placeholder specs so we can regenerate them
Dir.glob(SPEC_DIR.join('**', '*_spec.rb')).each do |f|
  begin
    File.delete(f)
  rescue StandardError => e
    warn "Failed to remove #{f}: #{e.message}"
  end
end

def sanitize_name(path)
  name = path.to_s.downcase.gsub(%r{[^0-9a-z]+}, '_').gsub(/^_+|_+$/, '')
  name = "doc_#{name}" if name =~ /^[0-9]/
  name
end

modified = []
created_specs = []

files = Dir.glob(DOCS_GLOB) + ROOT_MD.select { |p| File.exist?(p) }

# load optional mappings: relative_doc_path -> { 'url' => '/path', 'selector' => '#id' }
mappings = {}
if MAPPING_FILE.exist?
  require 'yaml'
  begin
    raw = File.read(MAPPING_FILE)
    # strip Markdown/YAML fenced code block markers if present (```yaml ... ```)
    raw = raw.sub(/\A\s*```(?:yaml)?\s*\n/, '')
    raw = raw.sub(/\n\s*```\s*\z/, '')
    # parse YAML safely
    parsed = YAML.safe_load(raw)
    mappings = parsed || {}
  rescue StandardError => e
    puts "Failed to load #{MAPPING_FILE}: #{e.message}"
    mappings = {}
  end
end
files.each do |file|
  text = File.read(file)
  # skip if explicitly opted out
  next if text.include?('<!-- NO_SCREENSHOT -->')

  # Remove any existing SCREENSHOT placeholder blocks so we can regenerate them
  # A placeholder block looks like:
  # <!-- SCREENSHOT: ... -->\n
  # ![...](...)\n\n
  new_text = text.dup
  # remove comment+image+blankline patterns repeatedly
  while new_text.match(/<!-- SCREENSHOT:/)
    new_text = new_text.gsub(/<!-- SCREENSHOT:[\s\S]*?-->\n\s*!?\[.*?\]\(.*?\)\n\n/m, '')
    # fallback: remove lone comment lines if any remain
    new_text = new_text.gsub(/<!-- SCREENSHOT:[\s\S]*?-->\n/m, '')
  end
  text = new_text

  rel = Pathname.new(file).relative_path_from(ROOT).to_s
  base = Pathname.new(file).basename.sub_ext('').to_s
  name = sanitize_name(File.join(Pathname.new(file).dirname.relative_path_from(ROOT).to_s, base))

  # Build placeholder block (desktop + mobile)
  spec_path = "spec/docs_screenshots/#{name}_spec.rb"

  # Compute relative path from the markdown file's directory to the docs/screenshots directory
  screenshots_dir = ROOT.join('docs', 'screenshots')
  begin
    rel_to_screenshots = Pathname.new(screenshots_dir).relative_path_from(Pathname.new(file).dirname).to_s
  rescue StandardError
    # Fallback to repository-relative path if relative calculation fails
    rel_to_screenshots = File.join('..', 'docs', 'screenshots')
  end

  placeholder = <<~MD
    <!-- SCREENSHOT: name=#{name} device=desktop spec=#{spec_path}:1 -->
    ![#{base} (desktop)](#{rel_to_screenshots}/desktop/#{name}.png)

    <!-- SCREENSHOT: name=#{name} device=mobile spec=#{spec_path}:1 -->
    ![#{base} (mobile)](#{rel_to_screenshots}/mobile/#{name}.png)

  MD

  # Determine insertion point: after first H2 (## ), else after first paragraph
  lines = text.lines
  insert_at = nil
  lines.each_with_index do |l, i|
    if l.start_with?('## ')
      # insert after this header and following blank line if exists
      insert_at = i + 1
      while insert_at < lines.length && lines[insert_at].strip != ''
        insert_at += 1
      end
      insert_at += 1 if insert_at < lines.length
      break
    end
  end

  if insert_at.nil?
    # find first paragraph end
    idx = 0
    while idx < lines.length && lines[idx].strip == ''
      idx += 1
    end
    # find end of first paragraph
    while idx < lines.length && lines[idx].strip != ''
      idx += 1
    end
    insert_at = idx + 1
  end

  # Insert placeholder
  lines.insert(insert_at, placeholder)
  File.write(file, lines.join)
  modified << file

  # Create skeleton spec if not exists
  spec_file = ROOT.join(spec_path)
  mapping_key = Pathname.new(file).relative_path_from(ROOT).to_s
  mapping = mappings[mapping_key] || mappings[File.basename(file)]
  mapping = {} unless mapping.is_a?(Hash)

  if File.exist?(spec_file)
    # If mapping exists, try to auto-replace visit placeholder
    if mapping && mapping['url']
      content = File.read(spec_file)
      new_visit = "            visit '#{mapping['url']}'"
      content = content.sub(/visit .+?# TODO: update to target path for this screenshot/, new_visit)
      content = content.sub(/visit '\/'/, new_visit)
      File.write(spec_file, content)
    end
  else
    FileUtils.mkdir_p(spec_file.dirname)
    spec_content = <<~RUBY
      # frozen_string_literal: true
      require 'rails_helper'

      RSpec.describe 'Docs screenshots: #{rel}', type: :feature do
        include Capybara::DSL

  it '#{name} - desktop', :docs_screenshot, skip: 'placeholder - update visit', screenshot_name: '#{name}' do
          BetterTogether::CapybaraScreenshotEngine.capture('#{name}', device: :desktop) do
            #{ mapping['url'] ? "visit \"#{mapping['url']}\"" : "visit '/' # TODO: update to target path for this screenshot" }
          end
        end

  it '#{name} - mobile', :docs_screenshot, skip: 'placeholder - update visit', screenshot_name: '#{name}' do
          BetterTogether::CapybaraScreenshotEngine.capture('#{name}', device: :mobile) do
            #{ mapping['url'] ? "visit \"#{mapping['url']}\"" : "visit '/' # TODO: update to target path for this screenshot" }
          end
        end
      end
    RUBY

    File.write(spec_file, spec_content)
    created_specs << spec_file.to_s
  end
end

puts "Inserted placeholders into #{modified.count} files"
modified.each { |f| puts "  - #{f}" }
puts "Created #{created_specs.count} spec files"
created_specs.each { |s| puts "  - #{s}" }
