# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/better_together/authorizations', type: :request do # rubocop:todo Metrics/BlockLength
  # This should return the minimal set of attributes required to create a valid
  # BetterTogether::PersonPlatformIntegration. As you add validations to BetterTogether::PersonPlatformIntegration,
  # be sure to adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      # BetterTogether::PersonPlatformIntegration.create! valid_attributes
      # get person_platform_integrations_url
      # expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      # authorization = BetterTogether::PersonPlatformIntegration.create! valid_attributes
      # get person_platform_integration_url(authorization)
      # expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      # get new_person_platform_integration_url
      # expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      # authorization = BetterTogether::PersonPlatformIntegration.create! valid_attributes
      # get edit_person_platform_integration_url(authorization)
      # expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new BetterTogether::PersonPlatformIntegration' do
        # expect do
        #   post person_platform_integrations_url, params: { person_platform_integration: valid_attributes }
        # end.to change(BetterTogether::PersonPlatformIntegration, :count).by(1)
      end

      it 'redirects to the created person_platform_integration' do
        # post person_platform_integrations_url, params: { person_platform_integration: valid_attributes }
        # expect(response).to
        # redirect_to(person_platform_integration_url(BetterTogether::PersonPlatformIntegration.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new BetterTogether::PersonPlatformIntegration' do
        # expect do
        #   post person_platform_integrations_url, params: { person_platform_integration: invalid_attributes }
        # end.to change(BetterTogether::PersonPlatformIntegration, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        # post person_platform_integrations_url, params: { person_platform_integration: invalid_attributes }
        # expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested person_platform_integration' do
        # authorization = BetterTogether::PersonPlatformIntegration.create! valid_attributes
        # patch person_platform_integration_url(authorization), params: { person_platform_integration: new_attributes }
        # authorization.reload
        # skip('Add assertions for updated state')
      end

      it 'redirects to the person_platform_integration' do
        # authorization = BetterTogether::PersonPlatformIntegration.create! valid_attributes
        # patch person_platform_integration_url(authorization), params: { person_platform_integration: new_attributes }
        # authorization.reload
        # expect(response).to redirect_to(person_platform_integration_url(authorization))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        # authorization = BetterTogether::PersonPlatformIntegration.create! valid_attributes
        # patch person_platform_integration_url(authorization),
        #       params: { person_platform_integration: invalid_attributes }
        # expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested person_platform_integration' do
      # authorization = BetterTogether::PersonPlatformIntegration.create! valid_attributes
      # expect do
      #   delete person_platform_integration_url(authorization)
      # end.to change(BetterTogether::PersonPlatformIntegration, :count).by(-1)
    end

    it 'redirects to the person_platform_integrations list' do
      # authorization = BetterTogether::PersonPlatformIntegration.create! valid_attributes
      # delete person_platform_integration_url(authorization)
      # expect(response).to redirect_to(person_platform_integrations_url)
    end
  end
end
