%% Translatable Attachments flow
flowchart LR
  subgraph DB[Database]
    A[active_storage_attachments table]
  end

  M[Migration adds `locale` column & backfill] --> A

  Init[Mobility initializer]
  Init -->|require backend| B[Attachments backend (lib/mobility/backends/...)]
  Init -->|register backend| Mobility[Mobility.register_backend(:attachments)]

  B -->|provides| Apply[AttachmentsBackend.apply_to / setup]

  ModelCanonical[Model: `translates :hero_image, backend: :attachments`]
  ModelDSL[Model: `extend Mobility::DSL::Attachments`\n`translates_attached :hero_image`]

  ModelCanonical --> Apply
  ModelDSL --> Apply

  Apply -->|defines associations| Assoc[has_many :hero_image_attachments_all\nhas_one :hero_image_attachment]
  Apply -->|defines accessors| Accessors[hero_image_en, hero_image_en=, hero_image_en?, hero_image_en_url]

  View[Form partial: translated file field tabs]
  View -->|uploads per-locale| Controller

  Controller[Controller] -->|permits locale params or maps| Model
  Model -->|writer methods| ActiveStorage[Create/modify ActiveStorage::Attachment rows]
  ActiveStorage --> A

  Serve[URL helper / rails_blob_url] -->|serves blob| UserBrowser[User's browser]

  Accessors -->|getter fallback| Fallback[Default-locale fallback if enabled]
  Fallback --> ActiveStorage

  classDef infra fill:#f8f9fa,stroke:#333,stroke-width:1px;
  class DB,Init,B,Apply,Assoc,Accessors,View,Controller,ActiveStorage,Serve,Fallback infra;
